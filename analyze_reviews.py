#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import csv
import pandas as pd
from datetime import datetime
import os
import sys

def analyze_reviews(json_file):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(json_file, 'r', encoding='utf-8') as f:
        reviews = json.load(f)
    
    if not reviews:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    df = pd.DataFrame(reviews)
    
    print("="*60)
    print("üìä –ê–ù–ê–õ–ò–ó –û–¢–ó–´–í–û–í")
    print("="*60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(df)}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫: {df['branch_name'].nunique()}")
    
    # –†–µ–π—Ç–∏–Ω–≥–∏
    print(f"\n‚≠ê –†–ï–ô–¢–ò–ù–ì–ò:")
    print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {df['rating'].mean():.2f}")
    print(f"–ú–µ–¥–∏–∞–Ω–∞: {df['rating'].median():.2f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {df['rating'].min()}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {df['rating'].max()}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:")
    rating_dist = df['rating'].value_counts().sort_index()
    for rating, count in rating_dist.items():
        percentage = (count / len(df)) * 100
        stars = '‚≠ê' * int(rating)
        print(f"{rating} {stars}: {count} ({percentage:.1f}%)")
    
    # –¢–æ–ø-5 –ª—É—á—à–∏—Ö —Ç–æ—á–µ–∫
    print(f"\nüèÜ –¢–û–ü-5 –¢–û–ß–ï–ö –ü–û –†–ï–ô–¢–ò–ù–ì–£:")
    branch_stats = df.groupby('branch_name').agg({
        'rating': ['mean', 'count'],
        'is_verified': 'sum'
    }).round(2)
    branch_stats.columns = ['avg_rating', 'review_count', 'verified_count']
    branch_stats = branch_stats.sort_values('avg_rating', ascending=False)
    
    for i, (branch, stats) in enumerate(branch_stats.head().iterrows(), 1):
        print(f"{i}. {branch}")
        print(f"   –†–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f} | –û—Ç–∑—ã–≤–æ–≤: {int(stats['review_count'])} | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {int(stats['verified_count'])}")
    
    # –•—É–¥—à–∏–µ —Ç–æ—á–∫–∏
    print(f"\nüìâ –¢–û–ß–ö–ò –° –ù–ò–ó–ö–ò–ú –†–ï–ô–¢–ò–ù–ì–û–ú (< 4.0):")
    low_rated = branch_stats[branch_stats['avg_rating'] < 4.0]
    if not low_rated.empty:
        for branch, stats in low_rated.iterrows():
            print(f"- {branch}: {stats['avg_rating']:.2f} ({int(stats['review_count'])} –æ—Ç–∑—ã–≤–æ–≤)")
    else:
        print("–í—Å–µ —Ç–æ—á–∫–∏ –∏–º–µ—é—Ç —Ä–µ–π—Ç–∏–Ω–≥ 4.0 –∏ –≤—ã—à–µ!")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    df['date_created'] = pd.to_datetime(df['date_created'])
    df['year_month'] = df['date_created'].dt.to_period('M')
    
    print(f"\nüìÖ –î–ò–ù–ê–ú–ò–ö–ê –û–¢–ó–´–í–û–í:")
    recent_months = df.groupby('year_month').size().tail(6)
    for period, count in recent_months.items():
        print(f"{period}: {count} –æ—Ç–∑—ã–≤–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–æ–π)
    print(f"\nüí¨ –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–û–í:")
    df['text_length'] = df['text'].fillna('').str.len()
    print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞: {df['text_length'].mean():.0f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–û—Ç–∑—ã–≤–æ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: {(df['text_length'] == 0).sum()}")
    
    # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    verified_pct = (df['is_verified'].sum() / len(df)) * 100
    print(f"\n‚úÖ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø:")
    print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {df['is_verified'].sum()} ({verified_pct:.1f}%)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"output/analysis_report_{timestamp}.txt"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ —Ñ–∞–π–ª
        original_stdout = sys.stdout
        sys.stdout = f
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –≤–µ—Å—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ñ–∞–π–ª–∞
        print("="*60)
        print("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–ó–´–í–û–í –°–ê–ù–î–´–ö –¢–ê–†–´")
        print(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ
        print("\n–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–û–ß–ö–ê–ú:")
        print("-"*60)
        
        for branch, stats in branch_stats.iterrows():
            print(f"\n{branch}")
            print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']:.2f}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤: {int(stats['review_count'])}")
            print(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {int(stats['verified_count'])}")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Ç–æ—á–∫–∏
            branch_reviews = df[df['branch_name'] == branch]
            rating_dist = branch_reviews['rating'].value_counts().sort_index()
            print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫:")
            for rating, count in rating_dist.items():
                print(f"  {rating}‚≠ê: {count}")
        
        sys.stdout = original_stdout
    
    print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–æ—á–∫–∞–º –≤ Excel
    excel_file = f"output/branch_statistics_{timestamp}.xlsx"
    branch_stats.to_excel(excel_file)
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—á–∫–∞–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {excel_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏
    output_dir = "output"
    json_files = [f for f in os.listdir(output_dir) if f.startswith("reviews_sandyq_tary_") and f.endswith(".json")]
    
    if not json_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å –æ—Ç–∑—ã–≤–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ parse_sandyq_tary.py")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    latest_file = sorted(json_files)[-1]
    json_path = os.path.join(output_dir, latest_file)
    
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {latest_file}")
    analyze_reviews(json_path)

if __name__ == "__main__":
    main()
