#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import csv
import json
import os
import sys
from datetime import datetime
import time
from parser import TwoGISReviewsParser

def load_branches_from_csv(csv_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    branches = []
    
    try:
        with open(csv_path, 'r', encoding='utf-8-sig') as file:  # utf-8-sig –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ BOM
            reader = csv.DictReader(file, delimiter=';')
            
            for row in reader:
                # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫
                name_key = None
                id_key = None
                
                for key in row.keys():
                    if '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏' in key:
                        name_key = key
                    elif '–ò–î 2gist' in key:
                        id_key = key
                
                if not name_key or not id_key:
                    continue
                    
                name = row.get(name_key, '').strip()
                id_2gis = row.get(id_key, '').strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID (–∏—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ, "null", "NULL")
                if name and id_2gis and id_2gis.lower() not in ['', 'null']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä
                    if id_2gis.isdigit():
                        branches.append({
                            'name': name,
                            'id_2gis': id_2gis
                        })
                    else:
                        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–æ—á–∫–∞ '{name}' - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ID: {id_2gis}")
                else:
                    if name:
                        print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç–æ—á–∫–∞ '{name}' - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID 2GIS")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞: {e}")
        return []
    
    return branches

def save_summary_report(all_reviews, branches, failed_branches, timestamp):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    
    report = {
        'parse_date': timestamp,
        'total_branches': len(branches),
        'successful_branches': len(branches) - len(failed_branches),
        'failed_branches': len(failed_branches),
        'total_reviews': len(all_reviews),
        'branches_summary': [],
        'failed_branches_list': failed_branches
    }
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ
    branch_stats = {}
    for review in all_reviews:
        branch_name = review['branch_name']
        if branch_name not in branch_stats:
            branch_stats[branch_name] = {
                'count': 0,
                'ratings': [],
                'verified_count': 0
            }
        branch_stats[branch_name]['count'] += 1
        if review['rating']:
            branch_stats[branch_name]['ratings'].append(review['rating'])
        if review.get('is_verified'):
            branch_stats[branch_name]['verified_count'] += 1
    
    for branch_name, stats in branch_stats.items():
        avg_rating = sum(stats['ratings']) / len(stats['ratings']) if stats['ratings'] else 0
        report['branches_summary'].append({
            'name': branch_name,
            'reviews_count': stats['count'],
            'average_rating': round(avg_rating, 2),
            'verified_reviews': stats['verified_count']
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_filename = f"output/parse_report_{timestamp}.json"
    with open(report_filename, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    return report_filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    print("="*60)
    print("üîç –ü–ê–†–°–ï–† –û–¢–ó–´–í–û–í 2GIS - –°–ê–ù–î–´–ö –¢–ê–†–´")
    print("="*60)
    
    # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
    csv_path = "data/sandyq_tary_branches.csv"
    
    if not os.path.exists(csv_path):
        print(f"‚ùå –§–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂
    branches = load_branches_from_csv(csv_path)
    
    if not branches:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞")
        return
    
    print(f"\n‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(branches)} —Ç–æ—á–µ–∫ –ø—Ä–æ–¥–∞–∂")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = TwoGISReviewsParser()
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    all_reviews = []
    failed_branches = []
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs('output', exist_ok=True)
    
    # –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
    print("\nüìä –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –æ—Ç–∑—ã–≤–æ–≤...\n")
    
    for i, branch in enumerate(branches, 1):
        print(f"[{i}/{len(branches)}] üè™ {branch['name']}")
        print(f"    ID: {branch['id_2gis']}")
        
        try:
            reviews = parser.parse_all_reviews(branch['id_2gis'], branch['name'])
            
            if reviews:
                all_reviews.extend(reviews)
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ
                ratings = [r['rating'] for r in reviews if r['rating']]
                avg_rating = sum(ratings) / len(ratings) if ratings else 0
                verified = sum(1 for r in reviews if r.get('is_verified'))
                
                print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
                print(f"    ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}")
                print(f"    ‚úîÔ∏è  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {verified}")
            else:
                print(f"    ‚ö†Ô∏è  –û—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            failed_branches.append({
                'name': branch['name'],
                'id': branch['id_2gis'],
                'error': str(e)
            })
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        progress = int((i / len(branches)) * 50)
        print(f"    [{'='*progress}{' '*(50-progress)}] {i}/{len(branches)}")
        print()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
        if i < len(branches):
            time.sleep(2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if all_reviews:
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # CSV —Ñ–∞–π–ª
        csv_filename = f"output/reviews_sandyq_tary_{timestamp}.csv"
        fieldnames = [
            'branch_id', 'branch_name', 'review_id', 'user_name', 
            'rating', 'text', 'date_created', 'date_edited', 
            'is_verified', 'likes_count', 'comments_count'
        ]
        
        with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(all_reviews)
        
        # JSON —Ñ–∞–π–ª
        json_filename = f"output/reviews_sandyq_tary_{timestamp}.json"
        with open(json_filename, 'w', encoding='utf-8') as jsonfile:
            json.dump(all_reviews, jsonfile, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_filename = save_summary_report(all_reviews, branches, failed_branches, timestamp)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "="*60)
        print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*60)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ—á–µ–∫: {len(branches) - len(failed_branches)}/{len(branches)}")
        print(f"üìù –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(all_reviews)}")
        
        if failed_branches:
            print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {len(failed_branches)} —Ç–æ—á–µ–∫:")
            for fb in failed_branches:
                print(f"   - {fb['name']} ({fb['id']}): {fb['error']}")
        
        # –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        all_ratings = [r['rating'] for r in all_reviews if r['rating']]
        if all_ratings:
            overall_rating = sum(all_ratings) / len(all_ratings)
            print(f"\n‚≠ê –û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {overall_rating:.2f}")
        
        print(f"\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"   - CSV: {csv_filename}")
        print(f"   - JSON: {json_filename}")
        print(f"   - –û—Ç—á–µ—Ç: {report_filename}")
        
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞")
    
    print("\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
