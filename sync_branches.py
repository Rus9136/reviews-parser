#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ Google Sheets –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∏–ª–∏–∞–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.
"""

import os
import sys
import logging
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

from database import Branch, Review
from branches_loader import load_branches_from_csv
from cache_manager import get_cache_manager
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL')
if not DATABASE_URL:
    logger.error("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def parse_new_branch_immediately(branch_id: str, branch_name: str, session):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞"""
    try:
        from parser import TwoGISReviewsParser
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞: {branch_name} (ID: {branch_id})")
        
        parser = TwoGISReviewsParser()
        reviews = parser.parse_all_reviews(branch_id, branch_name)
        
        if not reviews:
            logger.warning(f"‚ö†Ô∏è –û—Ç–∑—ã–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ {branch_name}")
            return 0
        
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_count = 0
        for review_data in reviews:
            review_id = review_data.get('id') or review_data.get('review_id')
            
            if not review_id:
                continue
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            date_str = review_data.get('date_created', '')
            date_created = None
            if date_str:
                try:
                    date_created = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
                except:
                    try:
                        date_created = datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S')
                    except:
                        pass
            
            review = Review(
                review_id=review_id,
                branch_id=branch_id,
                branch_name=branch_name,
                user_name=review_data.get('user', {}).get('name', '–ê–Ω–æ–Ω–∏–º'),
                rating=int(review_data.get('rating', 0)),
                text=review_data.get('text', ''),
                date_created=date_created,
                is_verified=review_data.get('verified', False),
                likes_count=review_data.get('likes_count', 0),
                comments_count=review_data.get('comments_count', 0),
                photos_count=review_data.get('photos_count', 0),
                photos_urls=review_data.get('photos_urls', [])
            )
            
            session.add(review)
            new_count += 1
        
        session.commit()
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {new_count} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ {branch_name}")
        return new_count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞ {branch_name}: {e}")
        session.rollback()
        return 0


def sync_branches_to_db():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ Google Sheets –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    session = SessionLocal()
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ Google Sheets
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ Google Sheets...")
        branches_data = load_branches_from_csv()
        
        if not branches_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª–æ–≤")
            return False
            
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(branches_data)} —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ Google Sheets")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª–∏–∞–ª—ã –∏–∑ –ë–î
        existing_branches = {b.branch_id: b for b in session.query(Branch).all()}
        logger.info(f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ {len(existing_branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        added_count = 0
        updated_count = 0
        new_branches = []  # –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
        for branch_data in branches_data:
            branch_id = branch_data.get('id_2gis')
            branch_name = branch_data.get('name')
            city = branch_data.get('city', '')
            address = branch_data.get('address', '')
            
            if not branch_id or not branch_name:
                logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∏–ª–∏–∞–ª –±–µ–∑ ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {branch_data}")
                continue
                
            if branch_id in existing_branches:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
                branch = existing_branches[branch_id]
                if (branch.branch_name != branch_name or 
                    branch.city != city or 
                    branch.address != address):
                    branch.branch_name = branch_name
                    branch.city = city
                    branch.address = address
                    branch.updated_at = datetime.utcnow()
                    updated_count += 1
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª–∏–∞–ª: {branch_name} (ID: {branch_id})")
            else:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
                new_branch = Branch(
                    branch_id=branch_id,
                    branch_name=branch_name,
                    city=city,
                    address=address
                )
                session.add(new_branch)
                added_count += 1
                new_branches.append((branch_id, branch_name))
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª: {branch_name} (ID: {branch_id})")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        session.commit()
        
        logger.info(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"  - –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤: {added_count}")
        logger.info(f"  - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: {updated_count}")
        logger.info(f"  - –í—Å–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ –ë–î: {len(existing_branches) + added_count}")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
        total_new_reviews = 0
        if new_branches:
            logger.info(f"\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è {len(new_branches)} –Ω–æ–≤—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤...")
            for branch_id, branch_name in new_branches:
                new_reviews_count = parse_new_branch_immediately(branch_id, branch_name, session)
                total_new_reviews += new_reviews_count
        
        # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã
        if added_count > 0 or updated_count > 0 or total_new_reviews > 0:
            logger.info("üîÑ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ API...")
            try:
                # –û—á–∏—Å—Ç–∫–∞ Redis –∫—ç—à–∞
                cache = get_cache_manager()
                if cache.is_available():
                    cache.invalidate_all_cache()
                    logger.info("‚úÖ Redis –∫—ç—à –æ—á–∏—â–µ–Ω")
                
                # –û—á–∏—Å—Ç–∫–∞ API –∫—ç—à–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
                try:
                    response = requests.post("http://127.0.0.1:8004/api/v1/cache/clear", timeout=5)
                    if response.status_code == 200:
                        logger.info("‚úÖ API –∫—ç—à –æ—á–∏—â–µ–Ω")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å API –∫—ç—à: {response.status_code}")
                except requests.RequestException as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–∑—ã–≤—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
        if total_new_reviews > 0:
            logger.info(f"üì± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {total_new_reviews} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤...")
            try:
                from telegram_notifications_queue import send_notifications_for_new_reviews
                send_notifications_for_new_reviews()
                logger.info("‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        session.rollback()
        return False
    finally:
        session.close()


if __name__ == "__main__":
    success = sync_branches_to_db()
    sys.exit(0 if success else 1)