#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
"""
import asyncio
import logging
import os
import csv
import time
from datetime import datetime, timedelta
from typing import List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode
from telegram.error import TelegramError

from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, desc
from dotenv import load_dotenv

from database import SessionLocal, TelegramUser, TelegramSubscription, TelegramUserState, Review, Branch
from telegram_calendar import create_calendar, process_calendar_selection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_states = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥

def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        return db
    finally:
        pass

def load_branches_from_csv():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    branches = []
    csv_path = "data/sandyq_tary_branches.csv"
    
    try:
        with open(csv_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file, delimiter=';')
            for row in reader:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ BOM –∏ –∫–∞–≤—ã—á–µ–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–ª–æ–Ω–æ–∫
                branch_id = None
                branch_name = None
                
                for key, value in row.items():
                    if '–ò–î 2gist' in key:
                        branch_id = value.strip() if value else ''
                    elif '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏' in key:
                        branch_name = value.strip() if value else ''
                
                # –¢–æ–ª—å–∫–æ —Ñ–∏–ª–∏–∞–ª—ã —Å ID
                if branch_id and branch_id not in ['null', 'NULL', ''] and branch_name:
                    branches.append({
                        'id': branch_id,
                        'name': branch_name
                    })
                    
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ CSV")
        for branch in branches[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ –ª–æ–≥–∞—Ö
            logger.info(f"  - {branch['name']} (ID: {branch['id']})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ CSV: {e}")
    
    return branches

def get_or_create_user(db: Session, user_id: str, user_data: dict) -> TelegramUser:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = db.query(TelegramUser).filter(TelegramUser.user_id == user_id).first()
    
    if not user:
        user = TelegramUser(
            user_id=user_id,
            username=user_data.get('username'),
            first_name=user_data.get('first_name'),
            last_name=user_data.get('last_name'),
            language_code=user_data.get('language_code')
        )
        db.add(user)
        db.commit()
        db.refresh(user)
    else:
        # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.username = user_data.get('username')
        user.first_name = user_data.get('first_name')
        user.last_name = user_data.get('last_name')
        user.language_code = user_data.get('language_code')
        user.updated_at = datetime.utcnow()
        db.commit()
    
    return user

def get_user_state(db: Session, user_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    state_record = db.query(TelegramUserState).filter(TelegramUserState.user_id == user_id).first()
    if state_record and state_record.state_data:
        return state_record.state_data
    return {}

def save_user_state(db: Session, user_id: str, state_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    state_record = db.query(TelegramUserState).filter(TelegramUserState.user_id == user_id).first()
    
    if state_record:
        state_record.state_data = state_data
        state_record.updated_at = datetime.utcnow()
    else:
        state_record = TelegramUserState(
            user_id=user_id,
            state_data=state_data
        )
        db.add(state_record)
    
    db.commit()

def clear_user_state(db: Session, user_id: str):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    state_record = db.query(TelegramUserState).filter(TelegramUserState.user_id == user_id).first()
    if state_record:
        db.delete(state_record)
        db.commit()

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, edit_message: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫
    db = get_db()
    try:
        subscriptions = db.query(TelegramSubscription).filter(
            and_(
                TelegramSubscription.user_id == user_id,
                TelegramSubscription.is_active == True
            )
        ).all()
        
        has_subscriptions = len(subscriptions) > 0
        
        keyboard = []
        
        if has_subscriptions:
            keyboard.append([InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤", callback_data="menu_reviews")])
            keyboard.append([InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="menu_subscriptions")])
        else:
            keyboard.append([InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="menu_subscribe")])
        
        keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if has_subscriptions:
            sub_names = [sub.branch_name for sub in subscriptions[:3]]
            sub_text = ", ".join(sub_names)
            if len(subscriptions) > 3:
                sub_text += f" –∏ –µ—â—ë {len(subscriptions) - 3}"
            
            text = f"üè™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" \
                   f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {sub_text}\n\n" \
                   f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            text = "üè™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" \
                   "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n\n" \
                   "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if edit_message:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    finally:
        db.close()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = str(user.id)
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    db = get_db()
    try:
        user_data = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'language_code': user.language_code
        }
        get_or_create_user(db, user_id, user_data)
    finally:
        db.close()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)

async def show_subscription_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    user_id = str(update.effective_user.id)
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã
    branches = load_branches_from_csv()
    
    if not branches:
        await update.callback_query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = get_db()
    try:
        existing_subscriptions = db.query(TelegramSubscription).filter(
            and_(
                TelegramSubscription.user_id == user_id,
                TelegramSubscription.is_active == True
            )
        ).all()
        
        # –ü–æ–ª—É—á–∏—Ç—å ID —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
        selected_branch_ids = [sub.branch_id for sub in existing_subscriptions]
        
        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏
        keyboard = []
        
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ"
        all_selected = len(selected_branch_ids) == len(branches)
        if all_selected:
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="unselect_all_branches")])
        else:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", callback_data="select_all_branches")])
        
        for branch in branches:
            is_selected = branch['id'] in selected_branch_ids
            text = f"‚úÖ {branch['name']}" if is_selected else branch['name']
            keyboard.append([InlineKeyboardButton(
                text=text,
                callback_data=f"toggle_branch_{branch['id']}|{branch['name']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_selection")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        state_data = {
            'selected_branches': selected_branch_ids,
            'available_branches': {b['id']: b['name'] for b in branches}
        }
        save_user_state(db, user_id, state_data)
        
        selected_count = len(selected_branch_ids)
        await update.callback_query.edit_message_text(
            f"üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({selected_count} –≤—ã–±—Ä–∞–Ω–æ):\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä'",
            reply_markup=reply_markup
        )
        
    finally:
        db.close()

async def show_subscriptions_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    user_id = str(update.effective_user.id)
    
    db = get_db()
    try:
        subscriptions = db.query(TelegramSubscription).filter(
            and_(
                TelegramSubscription.user_id == user_id,
                TelegramSubscription.is_active == True
            )
        ).all()
        
        if not subscriptions:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="menu_subscribe")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return
        
        keyboard = []
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscribe")])
        keyboard.append([InlineKeyboardButton("üóë –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="confirm_unsubscribe")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        sub_list = "\n".join([f"‚Ä¢ {sub.branch_name}" for sub in subscriptions])
        
        await update.callback_query.edit_message_text(
            f"üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n\n"
            f"‚úÖ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n{sub_list}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    finally:
        db.close()

async def show_reviews_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    user_id = str(update.effective_user.id)
    
    db = get_db()
    try:
        subscriptions = db.query(TelegramSubscription).filter(
            and_(
                TelegramSubscription.user_id == user_id,
                TelegramSubscription.is_active == True
            )
        ).all()
        
        if not subscriptions:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="menu_subscribe")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç
        if len(subscriptions) == 1:
            branch_id = subscriptions[0].branch_id
            branch_name = subscriptions[0].branch_name
            
            state_data = {
                'action': 'reviews',
                'selected_branch_id': branch_id,
                'selected_branch_name': branch_name,
                'step': 'date_from'
            }
            save_user_state(db, user_id, state_data)
            
            # –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            today = datetime.now()
            calendar = create_calendar(today.year, today.month)
            await update.callback_query.edit_message_text(
                f"üìÖ –í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª: {branch_name}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:",
                reply_markup=calendar
            )
            
        else:
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏
            keyboard = []
            for sub in subscriptions:
                keyboard.append([InlineKeyboardButton(
                    text=sub.branch_name,
                    callback_data=f"reviews_{sub.branch_id}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤:",
                reply_markup=reply_markup
            )
    
    finally:
        db.close()

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    await query.answer()
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    db = get_db()
    try:
        data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        if data.startswith('calendar_'):
            action, year, month, day = process_calendar_selection(data)
            
            if action == 'ignore':
                # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ
                return
            
            user_state = get_user_state(db, user_id)
            if not user_state or user_state.get('action') != 'reviews':
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return
            
            if action in ['prev', 'next']:
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
                if action == 'prev':
                    month -= 1
                    if month < 1:
                        month = 12
                        year -= 1
                else:  # next
                    month += 1
                    if month > 12:
                        month = 1
                        year += 1
                
                calendar = create_calendar(year, month)
                branch_name = user_state.get('selected_branch_name', '')
                
                if user_state.get('step') == 'date_from':
                    await query.edit_message_text(
                        f"üìÖ –í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª: {branch_name}\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:",
                        reply_markup=calendar
                    )
                elif user_state.get('step') == 'date_to':
                    date_from = datetime.fromisoformat(user_state['date_from']).date()
                    await query.edit_message_text(
                        f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_from.strftime('%d.%m.%Y')}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:",
                        reply_markup=calendar
                    )
                return
            
            elif action == 'day':
                # –î–µ–Ω—å –≤—ã–±—Ä–∞–Ω
                selected_date = datetime(year, month, day).date()
                
                if user_state.get('step') == 'date_from':
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
                    user_state['date_from'] = selected_date.isoformat()
                    user_state['step'] = 'date_to'
                    save_user_state(db, user_id, user_state)
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    calendar = create_calendar(selected_date.year, selected_date.month)
                    await query.edit_message_text(
                        f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {selected_date.strftime('%d.%m.%Y')}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:",
                        reply_markup=calendar
                    )
                    return
                    
                elif user_state.get('step') == 'date_to':
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
                    date_from = datetime.fromisoformat(user_state['date_from']).date()
                    date_to = selected_date
                    
                    if date_to < date_from:
                        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω–æ–≤–æ
                        calendar = create_calendar(year, month)
                        await query.edit_message_text(
                            f"‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!\n\n"
                            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {date_from.strftime('%d.%m.%Y')}\n\n"
                            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:",
                            reply_markup=calendar
                        )
                        return
                    
                    user_state['date_to'] = date_to.isoformat()
                    user_state['step'] = 'show_reviews'
                    user_state['offset'] = 0
                    save_user_state(db, user_id, user_state)
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã
                    await show_reviews_for_period(query, context)
                    return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if data == "main_menu":
            await show_main_menu(update, context, edit_message=True)
            return
        elif data == "menu_subscribe":
            await show_subscription_menu(update, context)
            return
        elif data == "menu_subscriptions":
            await show_subscriptions_management(update, context)
            return
        elif data == "menu_reviews":
            await show_reviews_menu(update, context)
            return
        elif data == "menu_help":
            await query.edit_message_text(
                "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
                "üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
                "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤:\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
                "‚Ä¢ –û—Ç–∑—ã–≤—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ 5 —à—Ç—É–∫\n\n"
                "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
                "‚Ä¢ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            return
        elif data == "confirm_unsubscribe":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏
            await query.edit_message_text(
                "‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?\n\n"
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="do_unsubscribe")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_subscriptions")]
                ])
            )
            return
        elif data == "do_unsubscribe":
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø–∏—Å–∫—É
            try:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
                subscriptions = db.query(TelegramSubscription).filter(
                    and_(
                        TelegramSubscription.user_id == user_id,
                        TelegramSubscription.is_active == True
                    )
                ).all()
                
                for subscription in subscriptions:
                    subscription.is_active = False
                    subscription.updated_at = datetime.utcnow()
                
                db.commit()
                
                await query.edit_message_text(
                    "‚úÖ –û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
                    "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data="menu_subscribe")],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {e}")
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_subscriptions")]
                    ])
                )
            return
        
        # –î–ª—è –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if data.startswith("toggle_branch_") or data.startswith("reviews_") or data == "show_more_reviews" or data == "confirm_selection" or data == "select_all_branches" or data == "unselect_all_branches":
            user_state = get_user_state(db, user_id)
            
            if not user_state:
                # –î–ª—è –∫–æ–º–∞–Ω–¥ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if data in ["select_all_branches", "unselect_all_branches"] or data.startswith("toggle_branch_"):
                    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    branches = load_branches_from_csv()
                    if branches:
                        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                        existing_subscriptions = db.query(TelegramSubscription).filter(
                            and_(
                                TelegramSubscription.user_id == user_id,
                                TelegramSubscription.is_active == True
                            )
                        ).all()
                        selected_branch_ids = [sub.branch_id for sub in existing_subscriptions]
                        
                        user_state = {
                            'selected_branches': selected_branch_ids,
                            'available_branches': {b['id']: b['name'] for b in branches}
                        }
                        save_user_state(db, user_id, user_state)
                    else:
                        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                        return
                elif data.startswith("reviews_"):
                    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
                    # –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                    pass  # –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –Ω–∏–∂–µ
                else:
                    await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                    return
        
        if data.startswith("toggle_branch_"):
            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–∞
            parts = data.split("_", 2)
            if len(parts) >= 3:
                branch_part = parts[2]  # "branch_id|branch_name"
                if '|' in branch_part:
                    branch_id, branch_name = branch_part.split('|', 1)
                else:
                    branch_id = branch_part
                    branch_name = 'Unknown'
                
                selected_branches = user_state.get('selected_branches', [])
                
                if branch_id in selected_branches:
                    selected_branches.remove(branch_id)
                else:
                    selected_branches.append(branch_id)
                
                user_state['selected_branches'] = selected_branches
                save_user_state(db, user_id, user_state)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                
                # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ" / "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö"
                total_branches = len(user_state['available_branches'])
                all_selected = len(selected_branches) == total_branches
                if all_selected:
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="unselect_all_branches")])
                else:
                    keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", callback_data="select_all_branches")])
                
                for bid, bname in user_state['available_branches'].items():
                    is_selected = bid in selected_branches
                    text = f"‚úÖ {bname}" if is_selected else bname
                    keyboard.append([InlineKeyboardButton(
                        text=text,
                        callback_data=f"toggle_branch_{bid}|{bname}"
                    )])
                
                keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_selection")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                selected_count = len(selected_branches)
                text = f"üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ({selected_count} –≤—ã–±—Ä–∞–Ω–æ):\n\n"
                text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä'"
                
                await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif data == "select_all_branches":
            # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
            if user_state:
                # –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã
                all_branch_ids = list(user_state['available_branches'].keys())
                user_state['selected_branches'] = all_branch_ids
                save_user_state(db, user_id, user_state)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                
                # –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö" (–≤—Å–µ –≤—ã–±—Ä–∞–Ω—ã)
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö", callback_data="unselect_all_branches")])
                
                for bid, bname in user_state['available_branches'].items():
                    text = f"‚úÖ {bname}"  # –í—Å–µ –≤—ã–±—Ä–∞–Ω—ã
                    keyboard.append([InlineKeyboardButton(
                        text=text,
                        callback_data=f"toggle_branch_{bid}|{bname}"
                    )])
                
                keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_selection")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                selected_count = len(all_branch_ids)
                text = f"üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({selected_count} –≤—ã–±—Ä–∞–Ω–æ):\n\n"
                text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä'"
                
                await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif data == "unselect_all_branches":
            # –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
            if user_state:
                user_state['selected_branches'] = []
                save_user_state(db, user_id, user_state)
                
                # –û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = []
                
                # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ" (–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)
                keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ", callback_data="select_all_branches")])
                
                for bid, bname in user_state['available_branches'].items():
                    text = bname  # –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
                    keyboard.append([InlineKeyboardButton(
                        text=text,
                        callback_data=f"toggle_branch_{bid}|{bname}"
                    )])
                
                keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_selection")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                text = f"üè™ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (0 –≤—ã–±—Ä–∞–Ω–æ):\n\n"
                text += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∏–ª–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä'"
                
                await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif data.startswith("reviews_"):
            # –í—ã–±—Ä–∞—Ç—å —Ñ–∏–ª–∏–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤
            branch_id = data.replace("reviews_", "")
            
            # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫
            subscription = db.query(TelegramSubscription).filter(
                and_(
                    TelegramSubscription.user_id == user_id,
                    TelegramSubscription.branch_id == branch_id,
                    TelegramSubscription.is_active == True
                )
            ).first()
            
            if subscription:
                branch_name = subscription.branch_name
                
                state_data = {
                    'action': 'reviews',
                    'selected_branch_id': branch_id,
                    'selected_branch_name': branch_name,
                    'step': 'date_from'
                }
                save_user_state(db, user_id, state_data)
                
                # –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
                today = datetime.now()
                calendar = create_calendar(today.year, today.month)
                await query.edit_message_text(
                    f"üìÖ –í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª: {branch_name}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:",
                    reply_markup=calendar
                )
            else:
                await query.edit_message_text(
                    "‚ùå –§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
        
        elif data == "show_more_reviews":
            # –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –æ—Ç–∑—ã–≤—ã
            if user_state and user_state.get('step') == 'show_reviews':
                user_state['offset'] = user_state.get('offset', 0) + 5
                save_user_state(db, user_id, user_state)
                await show_reviews_for_period(query, None)
        
        elif data == "confirm_selection":
            # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–æ–≤
            if not user_state:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return
                
            selected_branches = user_state.get('selected_branches', [])
            
            if not selected_branches:
                await query.edit_message_text("‚ùå –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
            try:
                # –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                existing_subscriptions = db.query(TelegramSubscription).filter(
                    TelegramSubscription.user_id == user_id
                ).all()
                
                existing_branch_ids = [sub.branch_id for sub in existing_subscriptions]
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω—è–ª–∏
                for subscription in existing_subscriptions:
                    if subscription.branch_id not in selected_branches:
                        subscription.is_active = False
                        subscription.updated_at = datetime.utcnow()
                    elif not subscription.is_active:
                        # –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
                        subscription.is_active = True
                        subscription.updated_at = datetime.utcnow()
                
                # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
                for branch_id in selected_branches:
                    if branch_id not in existing_branch_ids:
                        branch_name = user_state['available_branches'].get(branch_id, 'Unknown')
                        subscription = TelegramSubscription(
                            user_id=user_id,
                            branch_id=branch_id,
                            branch_name=branch_name
                        )
                        db.add(subscription)
                
                db.commit()
                
                # –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª–∏–∞–ª–∞–º–∏
                selected_names = [user_state['available_branches'][bid] for bid in selected_branches]
                selected_text = "\n".join([f"‚Ä¢ {name}" for name in selected_names])
                
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\n"
                    f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –¥–ª—è:\n\n"
                    f"{selected_text}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤", callback_data="menu_reviews")],
                        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏", callback_data="menu_subscriptions")],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ])
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            clear_user_state(db, user_id)
    
    except Exception as e:
        error_msg = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {error_msg}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if "Button_data_invalid" in error_msg or "Message is not modified" in error_msg:
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            try:
                clear_user_state(db, user_id)
                await query.edit_message_text(
                    "‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="main_menu")]
                    ])
                )
            except:
                await query.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="main_menu")]
                    ])
                )
        else:
            try:
                await query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="main_menu")]
                    ])
                )
            except:
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    finally:
        db.close()

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(update, context)

async def reviews_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reviews - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(update, context)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    text = update.message.text
    
    db = get_db()
    try:
        user_state = get_user_state(db, user_id)
        
        if not user_state:
            return
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_state.get('action') == 'reviews' and (user_state.get('step') == 'date_from' or user_state.get('step') == 'date_to'):
            # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç
            await update.message.reply_text(
                "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return
    
    finally:
        db.close()

async def show_reviews_for_period(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if hasattr(update_or_query, 'effective_user'):
        user_id = str(update_or_query.effective_user.id)
        is_callback = False
    else:
        user_id = str(update_or_query.from_user.id)
        is_callback = True
    
    db = get_db()
    try:
        user_state = get_user_state(db, user_id)
        
        if not user_state:
            return
        
        branch_id = user_state['selected_branch_id']
        branch_name = user_state['selected_branch_name']
        date_from = datetime.fromisoformat(user_state['date_from']).date()
        date_to = datetime.fromisoformat(user_state['date_to']).date()
        offset = user_state.get('offset', 0)
        limit = 5  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ 5 –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ —Ä–∞–∑
        # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        reviews = db.query(Review).filter(
            and_(
                Review.branch_id == branch_id,
                Review.date_created >= datetime.combine(date_from, datetime.min.time()),
                Review.date_created <= datetime.combine(date_to, datetime.max.time())
            )
        ).order_by(desc(Review.date_created)).offset(offset).limit(limit + 1).all()
        
        if not reviews:
            if offset == 0:
                message = f"‚ùå –û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}' –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data=f"reviews_{branch_id}")]
                ])
            else:
                message = "‚ùå –ë–æ–ª—å—à–µ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç."
                # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data=f"reviews_{branch_id}")]
                ])
            
            if is_callback:
                await update_or_query.edit_message_text(message, reply_markup=keyboard)
            else:
                await update_or_query.message.reply_text(message, reply_markup=keyboard)
            
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            clear_user_state(db, user_id)
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã (–¥–æ 5 —à—Ç—É–∫)
        reviews_to_show = reviews[:limit]
        has_more = len(reviews) > limit
        
        if offset == 0:
            header = f"üìã –û—Ç–∑—ã–≤—ã –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ '{branch_name}'\n"
            header += f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}\n\n"
            if is_callback:
                await update_or_query.edit_message_text(header)
            else:
                await update_or_query.message.reply_text(header)
        
        for review in reviews_to_show:
            await send_review_message(update_or_query, review, show_branch=False)
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –æ—Ç–∑—ã–≤—ã
        if has_more:
            keyboard = [
                [InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="show_more_reviews")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if is_callback:
                await update_or_query.message.reply_text(
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ {offset + len(reviews_to_show)} –æ—Ç–∑—ã–≤–æ–≤",
                    reply_markup=reply_markup
                )
            else:
                await update_or_query.message.reply_text(
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ {offset + len(reviews_to_show)} –æ—Ç–∑—ã–≤–æ–≤",
                    reply_markup=reply_markup
                )
        else:
            message = "‚úÖ –í—Å–µ –æ—Ç–∑—ã–≤—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞–∑–∞–Ω—ã."
            keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if is_callback:
                await update_or_query.message.reply_text(message, reply_markup=reply_markup)
            else:
                await update_or_query.message.reply_text(message, reply_markup=reply_markup)
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            clear_user_state(db, user_id)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        if hasattr(update_or_query, 'message'):
            await update_or_query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.")
        else:
            await update_or_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.")
    finally:
        db.close()

async def send_review_message(update_or_context, review: Review, show_branch: bool = True):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    rating_stars = "‚≠ê" * int(review.rating) if review.rating else "‚≠ê"
    
    message_text = ""
    if show_branch:
        message_text += f"üì¢ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {review.branch_name}:\n"
    
    message_text += f"üë§ –ê–≤—Ç–æ—Ä: {review.user_name or '–ê–Ω–æ–Ω–∏–º'}\n"
    message_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_stars} ({review.rating}/5)\n"
    message_text += f"üìù –¢–µ–∫—Å—Ç: {review.text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
    message_text += f"üìÖ –î–∞—Ç–∞: {review.date_created.strftime('%d.%m.%Y %H:%M') if review.date_created else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    
    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if hasattr(update_or_context, 'message'):
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_photo = update_or_context.message.reply_photo
        send_text = update_or_context.message.reply_text
        send_media_group = update_or_context.message.reply_media_group
    elif hasattr(update_or_context, 'bot'):
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        send_photo = lambda **kwargs: update_or_context.bot.send_photo(chat_id=update_or_context.chat_id, **kwargs)
        send_text = lambda **kwargs: update_or_context.bot.send_message(chat_id=update_or_context.chat_id, **kwargs)
        send_media_group = lambda **kwargs: update_or_context.bot.send_media_group(chat_id=update_or_context.chat_id, **kwargs)
    else:
        # –ö–æ–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å
        send_photo = lambda **kwargs: update_or_context.message.reply_photo(**kwargs)
        send_text = lambda **kwargs: update_or_context.message.reply_text(**kwargs)
        send_media_group = lambda **kwargs: update_or_context.message.reply_media_group(**kwargs)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if review.photos_urls and len(review.photos_urls) > 0:
        photos = review.photos_urls[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        
        if len(photos) == 1:
            # –û–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
            try:
                await send_photo(photo=photos[0], caption=message_text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                await send_text(text=message_text)
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –∞–ª—å–±–æ–º
            try:
                media = []
                for i, photo_url in enumerate(photos):
                    if i == 0:
                        media.append(InputMediaPhoto(media=photo_url, caption=message_text))
                    else:
                        media.append(InputMediaPhoto(media=photo_url))
                
                await send_media_group(media=media)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞: {e}")
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∞–ª—å–±–æ–º –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                await send_text(text=message_text)
    else:
        # –ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        await send_text(text=message_text)

async def send_new_review_notifications(application):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö"""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    db = get_db()
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        new_reviews = db.query(Review).filter(
            Review.sent_to_telegram == False
        ).all()
        
        if not new_reviews:
            logger.info("–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptions = db.query(TelegramSubscription).filter(
            TelegramSubscription.is_active == True
        ).all()
        
        if not subscriptions:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        subscriptions_by_branch = {}
        for sub in subscriptions:
            if sub.branch_id not in subscriptions_by_branch:
                subscriptions_by_branch[sub.branch_id] = []
            subscriptions_by_branch[sub.branch_id].append(sub)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sent_count = 0
        for review in new_reviews:
            if review.branch_id in subscriptions_by_branch:
                branch_subscriptions = subscriptions_by_branch[review.branch_id]
                
                for subscription in branch_subscriptions:
                    try:
                        # –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        class ChatContext:
                            def __init__(self, chat_id, bot):
                                self.chat_id = chat_id
                                self.bot = bot
                        
                        context = ChatContext(subscription.user_id, application.bot)
                        await send_review_message(context, review, show_branch=True)
                        sent_count += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user_id}: {e}")
            
            # –ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
            review.sent_to_telegram = True
        
        db.commit()
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        db.rollback()
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    application.add_handler(CommandHandler("reviews", reviews_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    logger.info("Telegram Bot –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()