#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
"""
import asyncio
import logging
import os
from datetime import datetime
from typing import List

from telegram import Bot, InputMediaPhoto
from telegram.error import TelegramError
from sqlalchemy.orm import Session
from dotenv import load_dotenv

from database import SessionLocal, TelegramSubscription, Review

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        return db
    finally:
        pass

async def send_review_message(bot: Bot, chat_id: str, review: Review, show_branch: bool = True):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∑—ã–≤–æ–º"""
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
        rating_stars = "‚≠ê" * int(review.rating) if review.rating else "‚≠ê"
        
        message_text = ""
        if show_branch:
            message_text += f"üì¢ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {review.branch_name}:\n"
        
        message_text += f"üë§ –ê–≤—Ç–æ—Ä: {review.user_name or '–ê–Ω–æ–Ω–∏–º'}\n"
        message_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_stars} ({review.rating}/5)\n"
        message_text += f"üìù –¢–µ–∫—Å—Ç: {review.text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
        message_text += f"üìÖ –î–∞—Ç–∞: {review.date_created.strftime('%d.%m.%Y %H:%M') if review.date_created else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if review.photos_urls and len(review.photos_urls) > 0:
            photos = review.photos_urls[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            
            if len(photos) == 1:
                # –û–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                try:
                    await bot.send_photo(
                        chat_id=chat_id,
                        photo=photos[0],
                        caption=message_text
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                    await bot.send_message(
                        chat_id=chat_id,
                        text=message_text
                    )
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - –∞–ª—å–±–æ–º
                try:
                    media = []
                    for i, photo_url in enumerate(photos):
                        if i == 0:
                            media.append(InputMediaPhoto(media=photo_url, caption=message_text))
                        else:
                            media.append(InputMediaPhoto(media=photo_url))
                    
                    await bot.send_media_group(
                        chat_id=chat_id,
                        media=media
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞: {e}")
                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –∞–ª—å–±–æ–º –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                    await bot.send_message(
                        chat_id=chat_id,
                        text=message_text
                    )
        else:
            # –ë–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            await bot.send_message(
                chat_id=chat_id,
                text=message_text
            )
        
        return True
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
        return False

async def send_new_review_notifications():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö"""
    if not BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    bot = Bot(token=BOT_TOKEN)
    db = get_db()
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        new_reviews = db.query(Review).filter(
            Review.sent_to_telegram == False
        ).all()
        
        if not new_reviews:
            logger.info("–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscriptions = db.query(TelegramSubscription).filter(
            TelegramSubscription.is_active == True
        ).all()
        
        if not subscriptions:
            logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤—ã –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            for review in new_reviews:
                review.sent_to_telegram = True
            db.commit()
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        subscriptions_by_branch = {}
        for sub in subscriptions:
            if sub.branch_id not in subscriptions_by_branch:
                subscriptions_by_branch[sub.branch_id] = []
            subscriptions_by_branch[sub.branch_id].append(sub)
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sent_count = 0
        for review in new_reviews:
            if review.branch_id in subscriptions_by_branch:
                branch_subscriptions = subscriptions_by_branch[review.branch_id]
                
                for subscription in branch_subscriptions:
                    try:
                        success = await send_review_message(bot, subscription.user_id, review, show_branch=True)
                        if success:
                            sent_count += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API (–Ω–µ –±–æ–ª–µ–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
                        await asyncio.sleep(0.05)
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user_id}: {e}")
            
            # –ü–æ–º–µ—Ç–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
            review.sent_to_telegram = True
        
        db.commit()
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        db.rollback()
    finally:
        db.close()

def send_notifications_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    asyncio.run(send_new_review_notifications())

if __name__ == "__main__":
    send_notifications_sync()