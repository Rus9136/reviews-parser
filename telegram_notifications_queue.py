#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
"""
import logging
import os
from datetime import datetime
from typing import List
from sqlalchemy.orm import Session
from dotenv import load_dotenv

from database import SessionLocal, TelegramSubscription, Review
from telegram_queue import queue_notification, get_queue_status

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        return db
    finally:
        pass

def format_review_message(review: Review, show_branch: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º"""
    rating_stars = "‚≠ê" * int(review.rating) if review.rating else "‚≠ê"
    
    message_text = ""
    if show_branch:
        message_text += f"üì¢ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {review.branch_name}:\n"
    
    message_text += f"üë§ –ê–≤—Ç–æ—Ä: {review.user_name or '–ê–Ω–æ–Ω–∏–º'}\n"
    message_text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating_stars} ({review.rating}/5)\n"
    message_text += f"üìù –¢–µ–∫—Å—Ç: {review.text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n"
    message_text += f"üìÖ –î–∞—Ç–∞: {review.date_created.strftime('%d.%m.%Y %H:%M') if review.date_created else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    
    if review.is_verified:
        message_text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤\n"
    
    return message_text

def send_review_notification(review: Review, high_priority: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
    
    Args:
        review: –û–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞
        high_priority: –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π —Ñ–∏–ª–∏–∞–ª
        subscriptions = db.query(TelegramSubscription).filter(
            TelegramSubscription.branch_id == review.branch_id
        ).all()
        
        if not subscriptions:
            logger.info(f"–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ñ–∏–ª–∏–∞–ª {review.branch_name}")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_review_message(review, show_branch=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        photos = []
        if review.photos_urls:
            photos = review.photos_urls[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        sent_count = 0
        for subscription in subscriptions:
            try:
                task_id = queue_notification(
                    chat_id=subscription.chat_id,
                    message=message,
                    photos=photos,
                    high_priority=high_priority
                )
                sent_count += 1
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {subscription.chat_id}, task: {task_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {subscription.chat_id}: {str(e)}")
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review.review_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
    finally:
        db.close()

def send_bulk_notifications(reviews: List[Review], high_priority: bool = False):
    """
    –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
    
    Args:
        reviews: –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
        high_priority: –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    total_sent = 0
    for review in reviews:
        try:
            send_review_notification(review, high_priority)
            total_sent += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review.review_id}: {str(e)}")
    
    logger.info(f"–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total_sent}/{len(reviews)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

def get_notifications_queue_status():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        return get_queue_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏: {str(e)}")
        return {"error": str(e)}

def send_system_notification(message: str, high_priority: bool = True):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        message: –¢–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        high_priority: –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        subscriptions = db.query(TelegramSubscription).distinct(TelegramSubscription.chat_id).all()
        
        if not subscriptions:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sent_count = 0
        chat_ids = set()
        
        for subscription in subscriptions:
            if subscription.chat_id not in chat_ids:
                chat_ids.add(subscription.chat_id)
                try:
                    task_id = queue_notification(
                        chat_id=subscription.chat_id,
                        message=f"üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n{message}",
                        photos=None,
                        high_priority=high_priority
                    )
                    sent_count += 1
                    logger.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {subscription.chat_id}, task: {task_id}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è {subscription.chat_id}: {str(e)}")
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {sent_count} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")
    finally:
        db.close()

def send_notifications_for_new_reviews():
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Telegram)
    """
    db = get_db()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        new_reviews = db.query(Review).filter(
            Review.sent_to_telegram == False
        ).all()
        
        if not new_reviews:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_reviews)} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–∑—ã–≤–∞
        for review in new_reviews:
            try:
                send_review_notification(review, high_priority=False)
                
                # –ü–æ–º–µ—á–∞–µ–º –æ—Ç–∑—ã–≤ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                review.sent_to_telegram = True
                db.commit()
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞
                from cache_manager import get_cache_manager
                cache = get_cache_manager()
                cache.invalidate_branch_cache(review.branch_id)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review.review_id}: {str(e)}")
                db.rollback()
        
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(new_reviews)} –æ—Ç–∑—ã–≤–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")
    finally:
        db.close()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
    status = get_notifications_queue_status()
    logger.info(f"–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏: {status}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    send_system_notification("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π", high_priority=True)