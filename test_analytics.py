#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
import os
import sys
sys.path.append('/root/projects/reviews-parser')

from datetime import datetime, timedelta
from database import SessionLocal
from telegram_analytics import TelegramAnalytics, generate_analytics_report

def test_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î
    db = SessionLocal()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics = TelegramAnalytics(db)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        branch_id = "70000001067929337"  # –û–¥–∏–Ω –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
        date_to = datetime.now()
        date_from = date_to - timedelta(days=30)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞ {branch_id}...")
        reviews = analytics.get_reviews_for_period(branch_id, date_from, date_to)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}")
        
        if reviews:
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print("üìà –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            stats = analytics.calculate_statistics(reviews)
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {stats['total_reviews']}")
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {stats['avg_rating']}")
            print(f"  ‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {stats['positive_count']} ({stats['positive_percent']}%)")
            print(f"  ‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {stats['neutral_count']} ({stats['neutral_percent']}%)")
            print(f"  ‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {stats['negative_count']} ({stats['negative_percent']}%)")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            report = generate_analytics_report(db, branch_id, "–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª", date_from, date_to)
            
            print("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
            print(f"  ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤–æ–¥–∫–∞: {len(report['summary_text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"  ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞: {report['rating_chart']}")
            print(f"  ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {report['count_chart']}")
            print(f"  ‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {report['distribution_chart']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
            for file_path in report['temp_files']:
                if os.path.exists(file_path):
                    print(f"  ‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}")
                else:
                    print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            analytics.cleanup_temp_files(report['temp_files'])
            
            print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª–∏–∞–ª –∏–ª–∏ –ø–µ—Ä–∏–æ–¥.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        db.close()

if __name__ == "__main__":
    test_analytics()