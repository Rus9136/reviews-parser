#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import time
import requests
import json

sys.path.append('/root/projects/reviews-parser')

def test_cache_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    api_url = "http://127.0.0.1:8004"
    
    try:
        # 1. –û—á–∏—â–∞–µ–º –∫—ç—à
        print("  üßπ –û—á–∏—â–∞–µ–º –∫—ç—à...")
        requests.post(f"{api_url}/api/v1/cache/clear", timeout=5)
        
        # 2. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
        print("  üîç –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –ë–î)...")
        start_time = time.time()
        response1 = requests.get(f"{api_url}/api/v1/branches", timeout=10)
        time1 = time.time() - start_time
        
        if response1.status_code == 200:
            data1 = response1.json()
            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data1)} —Ñ–∏–ª–∏–∞–ª–æ–≤ –∑–∞ {time1:.3f}—Å")
        
        # 3. –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)
        print("  üöÄ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)...")
        start_time = time.time()
        response2 = requests.get(f"{api_url}/api/v1/branches", timeout=10)
        time2 = time.time() - start_time
        
        if response2.status_code == 200:
            data2 = response2.json()
            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data2)} —Ñ–∏–ª–∏–∞–ª–æ–≤ –∑–∞ {time2:.3f}—Å")
        
        # 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if time1 > 0 and time2 > 0:
            speedup = time1 / time2
            print(f"  üìä –£—Å–∫–æ—Ä–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à—É: {speedup:.2f}x")
            
            if speedup > 2:
                print("  ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã")
            elif speedup > 1.2:
                print("  ‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–∫–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã")
            else:
                print("  ‚ö†Ô∏è  –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        cache_stats = requests.get(f"{api_url}/api/v1/cache/stats", timeout=5)
        if cache_stats.status_code == 200:
            stats = cache_stats.json()
            print(f"  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:")
            print(f"    - –ü–∞–º—è—Ç—å: {stats.get('memory_used', 'N/A')}")
            print(f"    - –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {stats.get('keys_total', 0)}")
            print(f"    - –ü–æ —Ç–∏–ø–∞–º: {stats.get('keys_by_type', {})}")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞: {e}")

def test_cache_invalidation():
    """–¢–µ—Å—Ç –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞...")
    
    api_url = "http://127.0.0.1:8004"
    
    try:
        # 1. –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à
        print("  üì• –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—ç—à...")
        requests.get(f"{api_url}/api/v1/branches", timeout=10)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à–µ
        cache_stats = requests.get(f"{api_url}/api/v1/cache/stats", timeout=5)
        if cache_stats.status_code == 200:
            stats = cache_stats.json()
            keys_before = stats.get('keys_total', 0)
            print(f"    üìä –ö–ª—é—á–µ–π –≤ –∫—ç—à–µ –¥–æ –æ—á–∏—Å—Ç–∫–∏: {keys_before}")
        
        # 3. –û—á–∏—â–∞–µ–º –∫—ç—à
        print("  üßπ –û—á–∏—â–∞–µ–º –∫—ç—à...")
        clear_response = requests.post(f"{api_url}/api/v1/cache/clear", timeout=5)
        if clear_response.status_code == 200:
            print("    ‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É
        cache_stats = requests.get(f"{api_url}/api/v1/cache/stats", timeout=5)
        if cache_stats.status_code == 200:
            stats = cache_stats.json()
            keys_after = stats.get('keys_total', 0)
            print(f"    üìä –ö–ª—é—á–µ–π –≤ –∫—ç—à–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {keys_after}")
            
            if keys_after < keys_before:
                print("    ‚úÖ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("    ‚ö†Ô∏è  –ö—ç—à –Ω–µ –±—ã–ª –æ—á–∏—â–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞: {e}")

def test_cache_ttl():
    """–¢–µ—Å—Ç TTL –∫—ç—à–∞"""
    print("\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TTL –∫—ç—à–∞...")
    
    try:
        from cache_manager import get_cache_manager
        
        cache = get_cache_manager()
        
        if not cache.is_available():
            print("  ‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–µ—Å—Ç TTL –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º TTL
        test_key = "test_ttl_key"
        test_value = {"test": "ttl_data", "timestamp": time.time()}
        
        print("  üì• –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å TTL 3 —Å–µ–∫—É–Ω–¥—ã...")
        cache.set(test_key, test_value, ttl=3)
        
        # 2. –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        data = cache.get(test_key)
        if data:
            print("    ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("    ‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å")
            return
        
        # 3. –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
        print("  ‚è≥ –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL (5 —Å–µ–∫—É–Ω–¥)...")
        time.sleep(5)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
        data = cache.get(test_key)
        if data is None:
            print("    ‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ TTL")
        else:
            print("    ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª–∏–ª–∏—Å—å –ø–æ TTL")
    
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TTL: {e}")

def run_cache_performance_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
    print("‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    test_cache_performance()
    test_cache_invalidation()
    test_cache_ttl()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    run_cache_performance_tests()