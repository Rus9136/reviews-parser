#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS
"""

import requests
import subprocess

def test_cors_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
    print("üõ°Ô∏è  –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CORS")
    print("=" * 50)
    
    api_url = "http://127.0.0.1:8004"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        {
            'name': '–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω (production)',
            'origin': 'https://reviews.aqniet.site',
            'expected': 'allowed'
        },
        {
            'name': 'Localhost (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)',
            'origin': 'http://localhost:3000',
            'expected': 'blocked'
        },
        {
            'name': '–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω',
            'origin': 'https://malicious-site.com',
            'expected': 'blocked'
        },
        {
            'name': '–ü–æ–¥–¥–æ–º–µ–Ω production',
            'origin': 'https://api.aqniet.site',
            'expected': 'blocked'
        },
        {
            'name': 'HTTP –≤–º–µ—Å—Ç–æ HTTPS',
            'origin': 'http://reviews.aqniet.site',
            'expected': 'blocked'
        },
        {
            'name': '–ë–µ–∑ Origin –∑–∞–≥–æ–ª–æ–≤–∫–∞',
            'origin': None,
            'expected': 'allowed'  # –û–±—ã—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è direct API calls
        }
    ]
    
    for test_case in test_cases:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_case['name']}")
        
        try:
            headers = {
                'Access-Control-Request-Method': 'GET',
                'Access-Control-Request-Headers': 'Content-Type'
            }
            
            if test_case['origin']:
                headers['Origin'] = test_case['origin']
            
            # CORS preflight –∑–∞–ø—Ä–æ—Å
            response = requests.options(
                f"{api_url}/api/v1/branches",
                headers=headers,
                timeout=5
            )
            
            print(f"  üìä –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
            cors_origin = response.headers.get('Access-Control-Allow-Origin')
            cors_methods = response.headers.get('Access-Control-Allow-Methods')
            cors_headers = response.headers.get('Access-Control-Allow-Headers')
            
            print(f"  üåê Access-Control-Allow-Origin: {cors_origin}")
            print(f"  üìã Access-Control-Allow-Methods: {cors_methods}")
            print(f"  üìù Access-Control-Allow-Headers: {cors_headers}")
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if test_case['expected'] == 'allowed':
                if response.status_code == 200 and cors_origin:
                    print(f"  ‚úÖ PASSED: –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")
                else:
                    print(f"  ‚ùå FAILED: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω")
            else:  # blocked
                if response.status_code in [403, 400] or not cors_origin:
                    print(f"  ‚úÖ PASSED: –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")
                elif cors_origin == test_case['origin']:
                    print(f"  ‚ùå FAILED: –ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω")
                else:
                    print(f"  ‚úÖ PASSED: –ó–∞–ø—Ä–æ—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
                    
        except Exception as e:
            print(f"  ‚ùå ERROR: {e}")
    
    print(f"\n{'='*50}")
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def test_security_headers():
    """–¢–µ—Å—Ç security –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    print("\nüîí –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SECURITY –ó–ê–ì–û–õ–û–í–ö–û–í")
    print("=" * 50)
    
    api_url = "http://127.0.0.1:8004"
    
    try:
        response = requests.get(f"{api_url}/health", timeout=5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ security –∑–∞–≥–æ–ª–æ–≤–∫–∏
        security_headers = {
            'X-Content-Type-Options': 'nosniff',
            'X-Frame-Options': 'DENY',
            'X-XSS-Protection': '1; mode=block',
            'Strict-Transport-Security': 'max-age=31536000',
            'Content-Security-Policy': None  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        }
        
        print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ security –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
        
        for header, expected in security_headers.items():
            actual = response.headers.get(header)
            
            if actual:
                if expected and actual == expected:
                    print(f"  ‚úÖ {header}: {actual}")
                elif not expected:
                    print(f"  ‚úÖ {header}: {actual}")
                else:
                    print(f"  ‚ö†Ô∏è  {header}: {actual} (–æ–∂–∏–¥–∞–ª—Å—è: {expected})")
            else:
                print(f"  ‚ùå {header}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        sensitive_headers = ['Server', 'X-Powered-By', 'X-AspNet-Version']
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:")
        
        for header in sensitive_headers:
            if header in response.headers:
                print(f"  ‚ö†Ô∏è  {header}: {response.headers[header]} (–ª—É—á—à–µ —Å–∫—Ä—ã—Ç—å)")
            else:
                print(f"  ‚úÖ {header}: —Å–∫—Ä—ã—Ç")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è security –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

if __name__ == "__main__":
    test_cors_detailed()
    test_security_headers()