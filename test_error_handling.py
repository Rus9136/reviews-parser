#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –±—ã—Å—Ç—Ä—ã—Ö –Ω–∞–∂–∞—Ç–∏—è—Ö –∫–Ω–æ–ø–æ–∫
"""
import sys
sys.path.append('.')

from telegram_bot import get_user_state, save_user_state, clear_user_state, load_branches_from_csv
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL')
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    db = SessionLocal()
    try:
        test_user_id = "test_error_user"
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        clear_user_state(db, test_user_id)
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        # –¢–µ—Å—Ç 1: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        print("\nüìù –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        user_state = get_user_state(db, test_user_id)
        
        if not user_state:
            print("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        else:
            print("   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            return False
        
        # –¢–µ—Å—Ç 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\nüìù –¢–µ—Å—Ç 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        branches = load_branches_from_csv()
        
        if branches:
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –≤ –±–æ—Ç–µ
            user_state = {
                'selected_branches': [],
                'available_branches': {b['id']: b['name'] for b in branches}
            }
            save_user_state(db, test_user_id, user_state)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            restored_state = get_user_state(db, test_user_id)
            
            if restored_state and 'available_branches' in restored_state:
                print(f"   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å {len(restored_state['available_branches'])} —Ñ–∏–ª–∏–∞–ª–∞–º–∏")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return False
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã")
            return False
        
        # –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        print("\nüìù –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        
        # –ë—ã—Å—Ç—Ä–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        for i in range(5):
            current_state = get_user_state(db, test_user_id)
            if current_state:
                current_state['selected_branches'] = [f"branch_{i}"]
                save_user_state(db, test_user_id, current_state)
        
        final_state = get_user_state(db, test_user_id)
        if final_state and final_state.get('selected_branches') == ['branch_4']:
            print("   ‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö")
            return False
        
        # –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\nüìù –¢–µ—Å—Ç 4: –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        clear_user_state(db, test_user_id)
        
        cleaned_state = get_user_state(db, test_user_id)
        if not cleaned_state:
            print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ")
        else:
            print("   ‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ—á–∏—â–µ–Ω–æ")
            return False
        
        # –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\nüìù –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        invalid_state = {
            'selected_branches': None,  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            'available_branches': {}
        }
        save_user_state(db, test_user_id, invalid_state)
        
        retrieved_state = get_user_state(db, test_user_id)
        if retrieved_state:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å None)
            selected = retrieved_state.get('selected_branches', [])
            if selected is None:
                print("   ‚úÖ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)")
            else:
                print("   ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
        else:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    finally:
        # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        clear_user_state(db, "test_error_user")
        db.close()

if __name__ == "__main__":
    success = test_error_handling()
    sys.exit(0 if success else 1)