#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
"""

import sys
import time
import subprocess
import requests
from datetime import datetime

sys.path.append('/root/projects/reviews-parser')

def test_redis_failure_scenario():
    """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–±–æ—è Redis"""
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–±–æ—è Redis...")
    
    api_url = "http://127.0.0.1:8004"
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        response = requests.get(f"{api_url}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"  üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: cache={data.get('cache', 'unknown')}")
        
        # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis
        print("  üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis...")
        subprocess.run(["docker", "stop", "reviews-redis"], 
                      capture_output=True, check=False)
        
        # –ñ–¥–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É
        time.sleep(3)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É API –±–µ–∑ Redis
        print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É API –±–µ–∑ Redis...")
        response = requests.get(f"{api_url}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"  üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ Redis: cache={data.get('cache', 'unknown')}")
            
            # API –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –±–µ–∑ –∫—ç—à–∞
            if data['status'] == 'healthy':
                print("  ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis (graceful degradation)")
            else:
                print("  ‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints –±–µ–∑ –∫—ç—à–∞
        response = requests.get(f"{api_url}/api/v1/branches", timeout=10)
        if response.status_code == 200:
            branches = response.json()
            print(f"  ‚úÖ API branches —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫—ç—à–∞: {len(branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        else:
            print(f"  ‚ùå API branches –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∫—ç—à–∞: {response.status_code}")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—è Redis: {e}")
    
    finally:
        # 5. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis
        print("  üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Redis...")
        subprocess.run(["docker", "start", "reviews-redis"], 
                      capture_output=True, check=False)
        
        # –ñ–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        try:
            response = requests.get(f"{api_url}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"  üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: cache={data.get('cache', 'unknown')}")
                
                if data.get('cache') == 'connected':
                    print("  ‚úÖ Redis —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    print("  ‚ö†Ô∏è  Redis –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

def test_queue_worker_failure():
    """–¢–µ—Å—Ç —Å–±–æ—è –≤–æ—Ä–∫–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏"""
    print("\nüî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–±–æ—è –≤–æ—Ä–∫–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏...")
    
    try:
        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        print("  üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏...")
        result = subprocess.run(
            ["sudo", "systemctl", "stop", "telegram-queue.service"],
            capture_output=True, text=True
        )
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ –µ—â–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å
        print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –≤–æ—Ä–∫–µ—Ä–∞...")
        
        from telegram_queue import queue_notification
        
        task_id = queue_notification(
            chat_id=12345,
            message="üß™ –¢–µ—Å—Ç –±–µ–∑ –≤–æ—Ä–∫–µ—Ä–∞",
            photos=None
        )
        
        if task_id:
            print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –±–µ–∑ –≤–æ—Ä–∫–µ—Ä–∞: {task_id}")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –≤–æ—Ä–∫–µ—Ä–∞")
        
        # 3. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä
        print("  üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏...")
        result = subprocess.run(
            ["sudo", "systemctl", "start", "telegram-queue.service"],
            capture_output=True, text=True
        )
        
        time.sleep(3)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Ä–∫–µ—Ä–∞
        result = subprocess.run(
            ["sudo", "systemctl", "is-active", "telegram-queue.service"],
            capture_output=True, text=True
        )
        
        if result.stdout.strip() == "active":
            print("  ‚úÖ –í–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"  ‚ùå –í–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è: {result.stdout.strip()}")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—è –≤–æ—Ä–∫–µ—Ä–∞: {e}")

def test_database_connection_failure():
    """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–±–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
    print("\nüî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–±–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î...")
    
    api_url = "http://127.0.0.1:8004"
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        response = requests.get(f"{api_url}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"  üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î: {data.get('database', 'unknown')}")
        
        # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL
        print("  üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL...")
        subprocess.run(
            ["docker", "stop", "reviews-db"], 
            capture_output=True, check=False
        )
        
        time.sleep(3)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ API –±–µ–∑ –ë–î
        print("  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ API –±–µ–∑ –ë–î...")
        try:
            response = requests.get(f"{api_url}/health", timeout=5)
            print(f"  üìä Health check –±–µ–∑ –ë–î: {response.status_code}")
            
            if response.status_code == 503:
                print("  ‚úÖ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 503 –±–µ–∑ –ë–î")
            else:
                print(f"  ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            print("  ‚ùå API –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –ë–î")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –±–µ–∑ –ë–î: {e}")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—è –ë–î: {e}")
    
    finally:
        # 4. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL
        print("  üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PostgreSQL...")
        subprocess.run(
            ["docker", "start", "reviews-db"], 
            capture_output=True, check=False
        )
        
        # –ñ–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        time.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        try:
            response = requests.get(f"{api_url}/health", timeout=10)
            if response.status_code == 200:
                data = response.json()
                print(f"  üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {data.get('database', 'unknown')}")
                
                if data.get('database') == 'connected':
                    print("  ‚úÖ PostgreSQL —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    print("  ‚ö†Ô∏è  PostgreSQL –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é")
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")

def test_api_restart_scenario():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–∏—Å–∞...")
    
    api_url = "http://127.0.0.1:8004"
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        response = requests.get(f"{api_url}/health", timeout=5)
        if response.status_code == 200:
            print("  üìä API —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
        
        # 2. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–∏—Å
        print("  üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–∏—Å...")
        subprocess.run(
            ["sudo", "systemctl", "restart", "reviews-api.service"],
            capture_output=True, text=True
        )
        
        # 3. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        print("  ‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API...")
        max_attempts = 30
        
        for attempt in range(max_attempts):
            try:
                time.sleep(1)
                response = requests.get(f"{api_url}/health", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    print(f"  ‚úÖ API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∑–∞ {attempt + 1} —Å–µ–∫—É–Ω–¥")
                    print(f"  üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {data}")
                    break
            except:
                if attempt == max_attempts - 1:
                    print(f"  ‚ùå API –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∑–∞ {max_attempts} —Å–µ–∫—É–Ω–¥")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ API: {e}")

def test_load_scenario():
    """–¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...")
    
    api_url = "http://127.0.0.1:8004"
    
    try:
        start_time = time.time()
        successful_requests = 0
        failed_requests = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 50 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        print("  üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API...")
        
        import concurrent.futures
        import requests
        
        def make_request():
            try:
                response = requests.get(f"{api_url}/api/v1/branches", timeout=10)
                return response.status_code == 200
            except:
                return False
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(make_request) for _ in range(50)]
            
            for future in concurrent.futures.as_completed(futures):
                if future.result():
                    successful_requests += 1
                else:
                    failed_requests += 1
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
        print(f"    - –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful_requests}")
        print(f"    - –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {failed_requests}")
        print(f"    - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"    - RPS: {50/duration:.2f}")
        
        if successful_requests >= 45:  # 90% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            print("  ‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
        else:
            print("  ‚ö†Ô∏è  –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def run_failover_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    print("üî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    test_redis_failure_scenario()
    test_queue_worker_failure()
    test_database_connection_failure()
    test_api_restart_scenario()
    test_load_scenario()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    run_failover_tests()