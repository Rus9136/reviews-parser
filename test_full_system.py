#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Reviews Parser —Å Telegram Bot
"""
import os
import logging
import time
from datetime import datetime
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from dotenv import load_dotenv

from database import TelegramUser, TelegramSubscription, TelegramUserState, Review
from telegram_bot import load_branches_from_csv, get_user_state, save_user_state, clear_user_state
from telegram_notifications import send_notifications_sync

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL')
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def test_branch_loading():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤"""
    print("=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ ===")
    branches = load_branches_from_csv()
    
    if len(branches) >= 20:
        print(f"‚úÖ –§–∏–ª–∏–∞–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(branches)}")
        print(f"   –ü–µ—Ä–≤—ã–µ 3: {[b['name'] for b in branches[:3]]}")
        return True
    else:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤: {len(branches)}")
        return False

def test_database_tables():
    """–¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–µ—Å—Ç —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        users_count = db.query(TelegramUser).count()
        subscriptions_count = db.query(TelegramSubscription).count()
        states_count = db.query(TelegramUserState).count()
        reviews_count = db.query(Review).count()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–æ–∫: {subscriptions_count}")
        print(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–π: {states_count}")
        print(f"‚úÖ –û—Ç–∑—ã–≤–æ–≤: {reviews_count}")
        
        return reviews_count > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False
    finally:
        db.close()

def test_user_state_persistence():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\n=== –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ===")
    db = SessionLocal()
    
    try:
        test_user_id = "test_user_123"
        test_state = {
            'action': 'test',
            'selected_branches': ['branch1', 'branch2'],
            'step': 'test_step'
        }
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_user_state(db, test_user_id, test_state)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        retrieved_state = get_user_state(db, test_user_id)
        
        if retrieved_state == test_state:
            print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            clear_user_state(db, test_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
            empty_state = get_user_state(db, test_user_id)
            if not empty_state:
                print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ")
                return True
            else:
                print("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ")
                return False
        else:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {retrieved_state}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
        return False
    finally:
        db.close()

def test_notification_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\n=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===")
    
    try:
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        send_notifications_sync()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return False

def test_cron_jobs():
    """–¢–µ—Å—Ç cron –∑–∞–¥–∞–Ω–∏–π"""
    print("\n=== –¢–µ—Å—Ç cron –∑–∞–¥–∞–Ω–∏–π ===")
    
    try:
        import subprocess
        result = subprocess.run(['crontab', '-l'], capture_output=True, text=True)
        
        if result.returncode == 0:
            cron_content = result.stdout
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            has_parsing = "run_daily_parse.sh" in cron_content
            has_cleanup = "cleanup_old_states.py" in cron_content
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç: {'–î–∞' if has_parsing else '–ù–µ—Ç'}")
            print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤: {'–î–∞' if has_cleanup else '–ù–µ—Ç'}")
            
            return has_parsing and has_cleanup
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å cron –∑–∞–¥–∞–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ cron: {e}")
        return False

def test_services():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ ===")
    
    try:
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å API —Å–µ—Ä–≤–∏—Å
        api_result = subprocess.run(['systemctl', 'is-active', 'reviews-api.service'], 
                                   capture_output=True, text=True)
        api_active = api_result.stdout.strip() == 'active'
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram Bot —Å–µ—Ä–≤–∏—Å
        bot_result = subprocess.run(['systemctl', 'is-active', 'telegram-bot.service'], 
                                   capture_output=True, text=True)
        bot_active = bot_result.stdout.strip() == 'active'
        
        print(f"‚úÖ API —Å–µ—Ä–≤–∏—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if api_active else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        print(f"‚úÖ Telegram Bot: {'–†–∞–±–æ—Ç–∞–µ—Ç' if bot_active else '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
        
        return api_active and bot_active
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Reviews Parser\n")
    
    tests = [
        ("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤", test_branch_loading),
        ("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", test_database_tables),
        ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π", test_user_state_persistence),
        ("–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", test_notification_system),
        ("Cron –∑–∞–¥–∞–Ω–∏—è", test_cron_jobs),
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã", test_services)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:<15} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)