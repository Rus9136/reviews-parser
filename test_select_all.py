#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ"
"""
import sys
sys.path.append('.')

from telegram_bot import load_branches_from_csv

def test_select_all_functionality():
    """–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ'"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ'")
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã
    branches = load_branches_from_csv()
    
    if not branches:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª–∏–∞–ª—ã")
        return False
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
    
    # –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    available_branches = {b['id']: b['name'] for b in branches}
    
    # –¢–µ—Å—Ç 1: –í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã
    print("\nüìù –¢–µ—Å—Ç 1: –í—ã–±–æ—Ä –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤")
    selected_branches = []  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
    
    # –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ"
    all_branch_ids = list(available_branches.keys())
    selected_branches = all_branch_ids
    
    print(f"   –î–æ: 0 —Ñ–∏–ª–∏–∞–ª–æ–≤")
    print(f"   –ü–æ—Å–ª–µ: {len(selected_branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
    
    if len(selected_branches) == len(branches):
        print("   ‚úÖ –í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω—ã")
    else:
        print("   ‚ùå –ù–µ –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –≤—ã–±—Ä–∞–Ω—ã")
        return False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–æ–ø–∫–∏
    print("\nüìù –¢–µ—Å—Ç 2: –°—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö")
    all_selected = len(selected_branches) == len(branches)
    
    if all_selected:
        button_text = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö"
        print(f"   –ö–Ω–æ–ø–∫–∞: {button_text}")
        print("   ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
    else:
        print("   ‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
        return False
    
    # –¢–µ—Å—Ç 3: –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö
    print("\nüìù –¢–µ—Å—Ç 3: –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤")
    
    # –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö"
    selected_branches = []
    
    print(f"   –î–æ: {len(all_branch_ids)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
    print(f"   –ü–æ—Å–ª–µ: {len(selected_branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
    
    if len(selected_branches) == 0:
        print("   ‚úÖ –í—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –æ—Ç–º–µ–Ω–µ–Ω—ã")
    else:
        print("   ‚ùå –ù–µ –≤—Å–µ —Ñ–∏–ª–∏–∞–ª—ã –æ—Ç–º–µ–Ω–µ–Ω—ã")
        return False
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    print("\nüìù –¢–µ—Å—Ç 4: –°—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö")
    all_selected = len(selected_branches) == len(branches)
    
    if not all_selected:
        button_text = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ"
        print(f"   –ö–Ω–æ–ø–∫–∞: {button_text}")
        print("   ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –æ–±—Ä–∞—Ç–Ω–æ")
    else:
        print("   ‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –æ–±—Ä–∞—Ç–Ω–æ")
        return False
    
    # –¢–µ—Å—Ç 5: –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–±–æ—Ä
    print("\nüìù –¢–µ—Å—Ç 5: –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–æ–≤")
    
    # –í—ã–±—Ä–∞—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É —Ñ–∏–ª–∏–∞–ª–æ–≤
    half_count = len(branches) // 2
    selected_branches = all_branch_ids[:half_count]
    
    print(f"   –í—ã–±—Ä–∞–Ω–æ: {len(selected_branches)} –∏–∑ {len(branches)}")
    
    all_selected = len(selected_branches) == len(branches)
    if not all_selected:
        button_text = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ"
        print(f"   –ö–Ω–æ–ø–∫–∞: {button_text}")
        print("   ‚úÖ –ü—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º –≤—ã–±–æ—Ä–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ'")
    else:
        print("   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º –≤—ã–±–æ—Ä–µ")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ' –ø—Ä–æ–π–¥–µ–Ω—ã!")
    return True

if __name__ == "__main__":
    success = test_select_all_functionality()
    sys.exit(0 if success else 1)