#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
"""
import os
import sys
sys.path.append('.')

from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, and_
from dotenv import load_dotenv
from database import TelegramSubscription

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL')
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def test_subscription_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        test_user_id = "test_user_123"
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.query(TelegramSubscription).filter(
            TelegramSubscription.user_id == test_user_id
        ).delete()
        db.commit()
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        initial_branches = [
            ("70000001057699052", "Sandyq –ê–ª–º–∞—Ç—ã"),
            ("70000001041483077", "Sandyq –®—ã–º–∫–µ–Ω—Ç")
        ]
        
        for branch_id, branch_name in initial_branches:
            subscription = TelegramSubscription(
                user_id=test_user_id,
                branch_id=branch_id,
                branch_name=branch_name
            )
            db.add(subscription)
        
        db.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {len(initial_branches)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        active_subs = db.query(TelegramSubscription).filter(
            and_(
                TelegramSubscription.user_id == test_user_id,
                TelegramSubscription.is_active == True
            )
        ).all()
        
        print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(active_subs)}")
        for sub in active_subs:
            print(f"   - {sub.branch_name} ({sub.branch_id})")
        
        # –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ)
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç: —Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ
        selected_branches = [
            "70000001057699052",  # Sandyq –ê–ª–º–∞—Ç—ã (—Å—Ç–∞—Ä–∞—è)
            "70000001041483077",  # Sandyq –®—ã–º–∫–µ–Ω—Ç (—Å—Ç–∞—Ä–∞—è)
            "70000001058907834",  # Sandyq –¢—É—Ä–∫–µ—Å—Ç–∞–Ω (–Ω–æ–≤–∞—è)
            "70000001065967444"   # Tary –ê—Å—Ç–∞–Ω–∞ (–Ω–æ–≤–∞—è)
        ]
        
        print(f"\\nüìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª {len(selected_branches)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –õ–æ–≥–∏–∫–∞ –∏–∑ –±–æ—Ç–∞
        existing_subscriptions = db.query(TelegramSubscription).filter(
            TelegramSubscription.user_id == test_user_id
        ).all()
        
        existing_branch_ids = [sub.branch_id for sub in existing_subscriptions]
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω—è–ª–∏
        for subscription in existing_subscriptions:
            if subscription.branch_id not in selected_branches:
                subscription.is_active = False
                print(f"   ‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {subscription.branch_name}")
            elif not subscription.is_active:
                subscription.is_active = True
                print(f"   ‚úÖ –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {subscription.branch_name}")
        
        # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        available_branches = {
            "70000001057699052": "Sandyq –ê–ª–º–∞—Ç—ã",
            "70000001041483077": "Sandyq –®—ã–º–∫–µ–Ω—Ç",
            "70000001058907834": "Sandyq –¢—É—Ä–∫–µ—Å—Ç–∞–Ω",
            "70000001065967444": "Tary –ê—Å—Ç–∞–Ω–∞"
        }
        
        for branch_id in selected_branches:
            if branch_id not in existing_branch_ids:
                branch_name = available_branches.get(branch_id, 'Unknown')
                subscription = TelegramSubscription(
                    user_id=test_user_id,
                    branch_id=branch_id,
                    branch_name=branch_name
                )
                db.add(subscription)
                print(f"   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞: {branch_name}")
        
        db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        final_active_subs = db.query(TelegramSubscription).filter(
            and_(
                TelegramSubscription.user_id == test_user_id,
                TelegramSubscription.is_active == True
            )
        ).all()
        
        print(f"\\n‚úÖ –ò—Ç–æ–≥–æ–≤—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(final_active_subs)}")
        for sub in final_active_subs:
            print(f"   - {sub.branch_name} ({sub.branch_id})")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–æ —á—Ç–æ –æ–∂–∏–¥–∞–ª–æ—Å—å
        expected_count = len(selected_branches)
        actual_count = len(final_active_subs)
        
        if actual_count == expected_count:
            print(f"\\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –û–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ {actual_count}")
            return True
        else:
            print(f"\\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω! –û–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ {actual_count}")
            return False
        
    finally:
        # –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        db.query(TelegramSubscription).filter(
            TelegramSubscription.user_id == test_user_id
        ).delete()
        db.commit()
        db.close()

if __name__ == "__main__":
    success = test_subscription_logic()
    sys.exit(0 if success else 1)