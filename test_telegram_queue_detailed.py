#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import sys
import time
import os
from datetime import datetime
from unittest.mock import patch, MagicMock

sys.path.append('/root/projects/reviews-parser')

from telegram_queue import queue_notification, get_queue_status
from telegram_notifications_queue import send_review_notification, format_review_message

def test_queue_worker_startup():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏"""
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏...")
    
    try:
        from telegram_queue import app as celery_app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–æ—Ä–∫–µ—Ä–∞
        print(f"  - Broker URL: {celery_app.conf.broker_url}")
        print(f"  - Task routes: {celery_app.conf.task_routes}")
        print(f"  - Rate limits: {celery_app.conf.task_annotations}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        registered_tasks = list(celery_app.tasks.keys())
        expected_tasks = [
            'telegram_queue.send_notification',
            'telegram_queue.send_notification_with_retry'
        ]
        
        for task in expected_tasks:
            if task in registered_tasks:
                print(f"  ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {task}")
            else:
                print(f"  ‚ùå –ó–∞–¥–∞—á–∞ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {task}")
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞: {e}")

def test_message_queuing():
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å"""
    print("\nüì¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å...")
    
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        chat_id = 12345
        message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"
        photos = ["https://example.com/photo1.jpg"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        task_id = queue_notification(chat_id, message, photos, high_priority=False)
        
        if task_id:
            print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {task_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
            time.sleep(1)  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            status = get_queue_status()
            print(f"  üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏: {status}")
            
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å")
        
        print("‚úÖ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")

def test_rate_limiting():
    """–¢–µ—Å—Ç rate limiting (30 —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫)"""
    print("\n‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
    
    try:
        start_time = time.time()
        task_ids = []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for i in range(10):
            task_id = queue_notification(
                chat_id=12345 + i,
                message=f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #{i}",
                photos=None,
                high_priority=False
            )
            if task_id:
                task_ids.append(task_id)
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"  üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(task_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
        
        if len(task_ids) == 10:
            print("  ‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å")
        else:
            print(f"  ‚ö†Ô∏è  –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(task_ids)} –∏–∑ 10 —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
        status = get_queue_status()
        print(f"  üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏: {status}")
        
        print("‚úÖ –¢–µ—Å—Ç rate limiting –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting: {e}")

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º chat_id (—Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞)
        try:
            task_id = queue_notification(
                chat_id="invalid_chat_id",
                message="–¢–µ—Å—Ç –æ—à–∏–±–∫–∏",
                photos=None
            )
            print("  ‚ö†Ô∏è  –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id –ø—Ä–∏–Ω—è—Ç (–æ–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞)")
        except Exception as e:
            print(f"  ‚úÖ –û—à–∏–±–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ chat_id –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {type(e).__name__}")
        
        # –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
        original_token = os.environ.get('TELEGRAM_BOT_TOKEN')
        try:
            os.environ.pop('TELEGRAM_BOT_TOKEN', None)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            print("  üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
        except Exception as e:
            print(f"  ‚úÖ –û—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {type(e).__name__}")
        finally:
            if original_token:
                os.environ['TELEGRAM_BOT_TOKEN'] = original_token
        
        print("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")

def test_message_formatting_edge_cases():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫—Ä–∞–π–Ω–∏–º–∏ —Å–ª—É—á–∞—è–º–∏
    test_cases = [
        {
            'name': '–ü–æ–ª–Ω—ã–π –æ—Ç–∑—ã–≤',
            'review': {
                'branch_name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª',
                'user_name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                'rating': 5,
                'text': '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å!',
                'date_created': datetime(2025, 7, 10, 12, 0, 0),
                'is_verified': True
            }
        },
        {
            'name': '–û—Ç–∑—ã–≤ –±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'review': {
                'branch_name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª',
                'user_name': None,
                'rating': 3,
                'text': '–ù–æ—Ä–º–∞–ª—å–Ω–æ',
                'date_created': datetime(2025, 7, 10, 12, 0, 0),
                'is_verified': False
            }
        },
        {
            'name': '–û—Ç–∑—ã–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞',
            'review': {
                'branch_name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª',
                'user_name': '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                'rating': 1,
                'text': None,
                'date_created': datetime(2025, 7, 10, 12, 0, 0),
                'is_verified': False
            }
        },
        {
            'name': '–û—Ç–∑—ã–≤ —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º',
            'review': {
                'branch_name': '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª',
                'user_name': '–î–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–±–µ–ª–∞–º–∏',
                'rating': 4,
                'text': '–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ ' * 20,  # ~600 —Å–∏–º–≤–æ–ª–æ–≤
                'date_created': datetime(2025, 7, 10, 12, 0, 0),
                'is_verified': True
            }
        }
    ]
    
    for test_case in test_cases:
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç
            mock_review = MagicMock()
            for key, value in test_case['review'].items():
                setattr(mock_review, key, value)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = format_review_message(mock_review, show_branch=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            assert len(message) > 0, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            assert '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∏–ª–∏–∞–ª' in message, "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞"
            
            print(f"  ‚úÖ {test_case['name']}: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        except Exception as e:
            print(f"  ‚ùå {test_case['name']}: {e}")
    
    print("‚úÖ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω")

def test_high_priority_queue():
    """–¢–µ—Å—Ç –æ—á–µ—Ä–µ–¥–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    print("\nüö® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        normal_task = queue_notification(
            chat_id=12345,
            message="üß™ –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            photos=None,
            high_priority=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        priority_task = queue_notification(
            chat_id=12345,
            message="üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            photos=None,
            high_priority=True
        )
        
        if normal_task and priority_task:
            print(f"  ‚úÖ –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞: {normal_task}")
            print(f"  ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: {priority_task}")
        else:
            print("  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á")
        
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–π–¥–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏: {e}")

def run_detailed_queue_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –æ—á–µ—Ä–µ–¥–∏"""
    print("üß™ –î–ï–¢–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ß–ï–†–ï–î–ò TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 60)
    
    test_queue_worker_startup()
    test_message_queuing()
    test_rate_limiting()
    test_error_handling()
    test_message_formatting_edge_cases()
    test_high_priority_queue()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    run_detailed_queue_tests()